

syntax = "proto3";
package service;

import "google/protobuf/empty.proto";

//is ready response
message IsReadyRsp {
    bool isReady = 1;
}

//grouping request
message GroupingReq {
    int32 peerIdx = 1;
    int32 rcvID = 2;
    int32 rcvParallelism = 3;
    int32 sndID = 4;
    int32 streamID = 5;
    int32 groupingType = 6;
}


//grouping response
message GroupingRsp {
    int32 parallelism = 1;
}


//data request
message DataReq {
    int32 rcvID = 1;
    int32 RcvIdx = 2;
    bytes Data = 3;
}

service IPCService {
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc IsReady(google.protobuf.Empty) returns (IsReadyRsp);
    rpc Grouping(GroupingReq) returns (GroupingRsp);
    rpc SendData (stream DataReq) returns (google.protobuf.Empty);
}

//protoc -I service/ service/service.proto --go_out=plugins=grpc:service
//protoc --gofast_out=plugins=grpc:. service.proto

/*
func (m *DataReq) GetHashKey(srcPrallelism int, srcIndex int, dstPrallelism int) uint64 {
	return 0
}
*/