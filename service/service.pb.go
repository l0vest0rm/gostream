// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	IsReadyRsp
	GroupingReq
	GroupingRsp
	DataReq
	EmptyParams
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// is ready response
type IsReadyRsp struct {
	IsReady bool `protobuf:"varint,1,opt,name=isReady" json:"isReady,omitempty"`
}

func (m *IsReadyRsp) Reset()                    { *m = IsReadyRsp{} }
func (m *IsReadyRsp) String() string            { return proto.CompactTextString(m) }
func (*IsReadyRsp) ProtoMessage()               {}
func (*IsReadyRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsReadyRsp) GetIsReady() bool {
	if m != nil {
		return m.IsReady
	}
	return false
}

// grouping request
type GroupingReq struct {
	PeerIdx        int32 `protobuf:"varint,1,opt,name=peerIdx" json:"peerIdx,omitempty"`
	RcvID          int32 `protobuf:"varint,2,opt,name=rcvID" json:"rcvID,omitempty"`
	RcvParallelism int32 `protobuf:"varint,3,opt,name=rcvParallelism" json:"rcvParallelism,omitempty"`
	SndID          int32 `protobuf:"varint,4,opt,name=sndID" json:"sndID,omitempty"`
	StreamID       int32 `protobuf:"varint,5,opt,name=streamID" json:"streamID,omitempty"`
	GroupingType   int32 `protobuf:"varint,6,opt,name=groupingType" json:"groupingType,omitempty"`
}

func (m *GroupingReq) Reset()                    { *m = GroupingReq{} }
func (m *GroupingReq) String() string            { return proto.CompactTextString(m) }
func (*GroupingReq) ProtoMessage()               {}
func (*GroupingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupingReq) GetPeerIdx() int32 {
	if m != nil {
		return m.PeerIdx
	}
	return 0
}

func (m *GroupingReq) GetRcvID() int32 {
	if m != nil {
		return m.RcvID
	}
	return 0
}

func (m *GroupingReq) GetRcvParallelism() int32 {
	if m != nil {
		return m.RcvParallelism
	}
	return 0
}

func (m *GroupingReq) GetSndID() int32 {
	if m != nil {
		return m.SndID
	}
	return 0
}

func (m *GroupingReq) GetStreamID() int32 {
	if m != nil {
		return m.StreamID
	}
	return 0
}

func (m *GroupingReq) GetGroupingType() int32 {
	if m != nil {
		return m.GroupingType
	}
	return 0
}

// grouping response
type GroupingRsp struct {
	Parallelism int32 `protobuf:"varint,1,opt,name=parallelism" json:"parallelism,omitempty"`
}

func (m *GroupingRsp) Reset()                    { *m = GroupingRsp{} }
func (m *GroupingRsp) String() string            { return proto.CompactTextString(m) }
func (*GroupingRsp) ProtoMessage()               {}
func (*GroupingRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GroupingRsp) GetParallelism() int32 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

// data request
type DataReq struct {
	RcvID  int32  `protobuf:"varint,1,opt,name=rcvID" json:"rcvID,omitempty"`
	RcvIdx int32  `protobuf:"varint,2,opt,name=RcvIdx" json:"RcvIdx,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *DataReq) Reset()                    { *m = DataReq{} }
func (m *DataReq) String() string            { return proto.CompactTextString(m) }
func (*DataReq) ProtoMessage()               {}
func (*DataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DataReq) GetRcvID() int32 {
	if m != nil {
		return m.RcvID
	}
	return 0
}

func (m *DataReq) GetRcvIdx() int32 {
	if m != nil {
		return m.RcvIdx
	}
	return 0
}

func (m *DataReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataReq) GetHashKey(srcPrallelism int, srcIndex int, dstPrallelism int) uint64 {
	return 0
}

func (m *DataReq) Marshal() ([]byte, error) {
	return nil, nil
}

// EmptyParams no params
type EmptyParams struct {
}

func (m *EmptyParams) Reset()                    { *m = EmptyParams{} }
func (m *EmptyParams) String() string            { return proto.CompactTextString(m) }
func (*EmptyParams) ProtoMessage()               {}
func (*EmptyParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*IsReadyRsp)(nil), "service.IsReadyRsp")
	proto.RegisterType((*GroupingReq)(nil), "service.GroupingReq")
	proto.RegisterType((*GroupingRsp)(nil), "service.GroupingRsp")
	proto.RegisterType((*DataReq)(nil), "service.DataReq")
	proto.RegisterType((*EmptyParams)(nil), "service.EmptyParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IPCService service

type IPCServiceClient interface {
	Ping(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error)
	IsReady(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*IsReadyRsp, error)
	Grouping(ctx context.Context, in *GroupingReq, opts ...grpc.CallOption) (*GroupingRsp, error)
	SendData(ctx context.Context, opts ...grpc.CallOption) (IPCService_SendDataClient, error)
}

type iPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewIPCServiceClient(cc *grpc.ClientConn) IPCServiceClient {
	return &iPCServiceClient{cc}
}

func (c *iPCServiceClient) Ping(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*EmptyParams, error) {
	out := new(EmptyParams)
	err := grpc.Invoke(ctx, "/service.IPCService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCServiceClient) IsReady(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*IsReadyRsp, error) {
	out := new(IsReadyRsp)
	err := grpc.Invoke(ctx, "/service.IPCService/IsReady", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCServiceClient) Grouping(ctx context.Context, in *GroupingReq, opts ...grpc.CallOption) (*GroupingRsp, error) {
	out := new(GroupingRsp)
	err := grpc.Invoke(ctx, "/service.IPCService/Grouping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCServiceClient) SendData(ctx context.Context, opts ...grpc.CallOption) (IPCService_SendDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IPCService_serviceDesc.Streams[0], c.cc, "/service.IPCService/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPCServiceSendDataClient{stream}
	return x, nil
}

type IPCService_SendDataClient interface {
	Send(*DataReq) error
	CloseAndRecv() (*EmptyParams, error)
	grpc.ClientStream
}

type iPCServiceSendDataClient struct {
	grpc.ClientStream
}

func (x *iPCServiceSendDataClient) Send(m *DataReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iPCServiceSendDataClient) CloseAndRecv() (*EmptyParams, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyParams)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for IPCService service

type IPCServiceServer interface {
	Ping(context.Context, *EmptyParams) (*EmptyParams, error)
	IsReady(context.Context, *EmptyParams) (*IsReadyRsp, error)
	Grouping(context.Context, *GroupingReq) (*GroupingRsp, error)
	SendData(IPCService_SendDataServer) error
}

func RegisterIPCServiceServer(s *grpc.Server, srv IPCServiceServer) {
	s.RegisterService(&_IPCService_serviceDesc, srv)
}

func _IPCService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.IPCService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCServiceServer).Ping(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCService_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCServiceServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.IPCService/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCServiceServer).IsReady(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCService_Grouping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCServiceServer).Grouping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.IPCService/Grouping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCServiceServer).Grouping(ctx, req.(*GroupingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCService_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IPCServiceServer).SendData(&iPCServiceSendDataServer{stream})
}

type IPCService_SendDataServer interface {
	SendAndClose(*EmptyParams) error
	Recv() (*DataReq, error)
	grpc.ServerStream
}

type iPCServiceSendDataServer struct {
	grpc.ServerStream
}

func (x *iPCServiceSendDataServer) SendAndClose(m *EmptyParams) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iPCServiceSendDataServer) Recv() (*DataReq, error) {
	m := new(DataReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.IPCService",
	HandlerType: (*IPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _IPCService_Ping_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _IPCService_IsReady_Handler,
		},
		{
			MethodName: "Grouping",
			Handler:    _IPCService_Grouping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _IPCService_SendData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xa9, 0x6e, 0x6b, 0x39, 0xdb, 0x44, 0x8e, 0x43, 0xc2, 0xae, 0x46, 0x2f, 0xc6, 0xae,
	0x26, 0xcc, 0xe1, 0x0b, 0x58, 0x91, 0xe0, 0xcd, 0xc8, 0x7c, 0x81, 0xd8, 0x86, 0x51, 0x58, 0xbb,
	0x98, 0xd4, 0xe2, 0x9e, 0xcd, 0xd7, 0xf1, 0x41, 0x24, 0x49, 0x5b, 0xa2, 0xd4, 0xbb, 0xfe, 0xff,
	0x39, 0x3f, 0x9c, 0x2f, 0x7f, 0x61, 0xaa, 0x85, 0xaa, 0xf3, 0x54, 0xac, 0xa5, 0x3a, 0x55, 0x27,
	0x0c, 0x1b, 0x19, 0x2f, 0x01, 0xa8, 0x66, 0x82, 0x67, 0x67, 0xa6, 0x25, 0x12, 0x08, 0x73, 0xa7,
	0x48, 0xb0, 0x08, 0x56, 0x11, 0x6b, 0x65, 0xfc, 0x15, 0xc0, 0xf8, 0x59, 0x9d, 0x3e, 0x64, 0x5e,
	0x1e, 0x98, 0x78, 0x37, 0x9b, 0x52, 0x08, 0x45, 0xb3, 0x4f, 0xbb, 0x39, 0x64, 0xad, 0xc4, 0x19,
	0x0c, 0x55, 0x5a, 0xd3, 0x84, 0x5c, 0x58, 0xdf, 0x09, 0x5c, 0xc2, 0x95, 0x4a, 0xeb, 0x1d, 0x57,
	0xfc, 0x78, 0x14, 0xc7, 0x5c, 0x17, 0xe4, 0xd2, 0x8e, 0xff, 0xb8, 0x26, 0xad, 0xcb, 0x8c, 0x26,
	0x64, 0xe0, 0xd2, 0x56, 0xe0, 0x1c, 0x22, 0x5d, 0x29, 0xc1, 0x0b, 0x9a, 0x90, 0xa1, 0x1d, 0x74,
	0x1a, 0x63, 0x98, 0x1c, 0x9a, 0xc3, 0x5e, 0xcf, 0x52, 0x90, 0x91, 0x9d, 0xff, 0xf2, 0xe2, 0x3b,
	0xef, 0x78, 0x2d, 0x71, 0x01, 0x63, 0xe9, 0x5d, 0xe2, 0x00, 0x7c, 0x2b, 0x7e, 0x81, 0x30, 0xe1,
	0x15, 0x37, 0xa4, 0x1d, 0x4f, 0xe0, 0xf3, 0xdc, 0xc2, 0x88, 0xa5, 0xb5, 0xc1, 0x77, 0x98, 0x8d,
	0x42, 0x84, 0x81, 0x09, 0x5a, 0xba, 0x09, 0xb3, 0xdf, 0xf1, 0x14, 0xc6, 0x4f, 0x85, 0xac, 0xce,
	0x86, 0xb3, 0xd0, 0x9b, 0xef, 0x00, 0x80, 0xee, 0x1e, 0xf7, 0xae, 0x01, 0xdc, 0xc0, 0x60, 0x97,
	0x97, 0x07, 0x9c, 0xad, 0xdb, 0x8a, 0xbc, 0xe5, 0x79, 0xaf, 0x8b, 0x5b, 0x08, 0x9b, 0xd6, 0xfe,
	0x89, 0xdd, 0x74, 0xae, 0xd7, 0xee, 0x03, 0x44, 0xed, 0x2b, 0x78, 0x31, 0xaf, 0xd5, 0x79, 0x8f,
	0xab, 0x25, 0x6e, 0x21, 0xda, 0x8b, 0x32, 0x33, 0x2c, 0x78, 0xdd, 0x6d, 0x34, 0xef, 0xd3, 0x7f,
	0xe1, 0x2a, 0x78, 0x1b, 0xd9, 0x3f, 0xed, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x73, 0xde, 0x9d,
	0x8e, 0x7a, 0x02, 0x00, 0x00,
}
