// Code generated by protoc-gen-gogo.
// source: service.proto
// DO NOT EDIT!

/*
	Package service is a generated protocol buffer package.

	It is generated from these files:
		service.proto

	It has these top-level messages:
		IsReadyRsp
		GroupingReq
		GroupingRsp
		DataReq
		DataReqs
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// is ready response
type IsReadyRsp struct {
	IsReady bool `protobuf:"varint,1,opt,name=isReady,proto3" json:"isReady,omitempty"`
}

func (m *IsReadyRsp) Reset()                    { *m = IsReadyRsp{} }
func (m *IsReadyRsp) String() string            { return proto.CompactTextString(m) }
func (*IsReadyRsp) ProtoMessage()               {}
func (*IsReadyRsp) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *IsReadyRsp) GetIsReady() bool {
	if m != nil {
		return m.IsReady
	}
	return false
}

// grouping request
type GroupingReq struct {
	PeerIdx        int32 `protobuf:"varint,1,opt,name=peerIdx,proto3" json:"peerIdx,omitempty"`
	RcvID          int32 `protobuf:"varint,2,opt,name=rcvID,proto3" json:"rcvID,omitempty"`
	RcvParallelism int32 `protobuf:"varint,3,opt,name=rcvParallelism,proto3" json:"rcvParallelism,omitempty"`
	SndID          int32 `protobuf:"varint,4,opt,name=sndID,proto3" json:"sndID,omitempty"`
	StreamID       int32 `protobuf:"varint,5,opt,name=streamID,proto3" json:"streamID,omitempty"`
	GroupingType   int32 `protobuf:"varint,6,opt,name=groupingType,proto3" json:"groupingType,omitempty"`
}

func (m *GroupingReq) Reset()                    { *m = GroupingReq{} }
func (m *GroupingReq) String() string            { return proto.CompactTextString(m) }
func (*GroupingReq) ProtoMessage()               {}
func (*GroupingReq) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *GroupingReq) GetPeerIdx() int32 {
	if m != nil {
		return m.PeerIdx
	}
	return 0
}

func (m *GroupingReq) GetRcvID() int32 {
	if m != nil {
		return m.RcvID
	}
	return 0
}

func (m *GroupingReq) GetRcvParallelism() int32 {
	if m != nil {
		return m.RcvParallelism
	}
	return 0
}

func (m *GroupingReq) GetSndID() int32 {
	if m != nil {
		return m.SndID
	}
	return 0
}

func (m *GroupingReq) GetStreamID() int32 {
	if m != nil {
		return m.StreamID
	}
	return 0
}

func (m *GroupingReq) GetGroupingType() int32 {
	if m != nil {
		return m.GroupingType
	}
	return 0
}

// grouping response
type GroupingRsp struct {
	Parallelism int32 `protobuf:"varint,1,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
}

func (m *GroupingRsp) Reset()                    { *m = GroupingRsp{} }
func (m *GroupingRsp) String() string            { return proto.CompactTextString(m) }
func (*GroupingRsp) ProtoMessage()               {}
func (*GroupingRsp) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *GroupingRsp) GetParallelism() int32 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

// data request
type DataReq struct {
	RcvID  int32  `protobuf:"varint,1,opt,name=rcvID,proto3" json:"rcvID,omitempty"`
	RcvIdx int32  `protobuf:"varint,2,opt,name=RcvIdx,proto3" json:"RcvIdx,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *DataReq) Reset()                    { *m = DataReq{} }
func (m *DataReq) String() string            { return proto.CompactTextString(m) }
func (*DataReq) ProtoMessage()               {}
func (*DataReq) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *DataReq) GetRcvID() int32 {
	if m != nil {
		return m.RcvID
	}
	return 0
}

func (m *DataReq) GetRcvIdx() int32 {
	if m != nil {
		return m.RcvIdx
	}
	return 0
}

func (m *DataReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataReq) GetHashKey(srcPrallelism int, srcIndex int, dstPrallelism int) uint64 {
	return 0
}

// data request
type DataReqs struct {
	Drs []*DataReq `protobuf:"bytes,1,rep,name=drs" json:"drs,omitempty"`
}

func (m *DataReqs) Reset()                    { *m = DataReqs{} }
func (m *DataReqs) String() string            { return proto.CompactTextString(m) }
func (*DataReqs) ProtoMessage()               {}
func (*DataReqs) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func (m *DataReqs) GetDrs() []*DataReq {
	if m != nil {
		return m.Drs
	}
	return nil
}

func init() {
	proto.RegisterType((*IsReadyRsp)(nil), "service.IsReadyRsp")
	proto.RegisterType((*GroupingReq)(nil), "service.GroupingReq")
	proto.RegisterType((*GroupingRsp)(nil), "service.GroupingRsp")
	proto.RegisterType((*DataReq)(nil), "service.DataReq")
	proto.RegisterType((*DataReqs)(nil), "service.DataReqs")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IPCService service

type IPCServiceClient interface {
	Ping(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	IsReady(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*IsReadyRsp, error)
	Grouping(ctx context.Context, in *GroupingReq, opts ...grpc.CallOption) (*GroupingRsp, error)
	SendData(ctx context.Context, opts ...grpc.CallOption) (IPCService_SendDataClient, error)
}

type iPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewIPCServiceClient(cc *grpc.ClientConn) IPCServiceClient {
	return &iPCServiceClient{cc}
}

func (c *iPCServiceClient) Ping(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/service.IPCService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCServiceClient) IsReady(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*IsReadyRsp, error) {
	out := new(IsReadyRsp)
	err := grpc.Invoke(ctx, "/service.IPCService/IsReady", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCServiceClient) Grouping(ctx context.Context, in *GroupingReq, opts ...grpc.CallOption) (*GroupingRsp, error) {
	out := new(GroupingRsp)
	err := grpc.Invoke(ctx, "/service.IPCService/Grouping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPCServiceClient) SendData(ctx context.Context, opts ...grpc.CallOption) (IPCService_SendDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IPCService_serviceDesc.Streams[0], c.cc, "/service.IPCService/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &iPCServiceSendDataClient{stream}
	return x, nil
}

type IPCService_SendDataClient interface {
	Send(*DataReqs) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type iPCServiceSendDataClient struct {
	grpc.ClientStream
}

func (x *iPCServiceSendDataClient) Send(m *DataReqs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iPCServiceSendDataClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for IPCService service

type IPCServiceServer interface {
	Ping(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	IsReady(context.Context, *google_protobuf.Empty) (*IsReadyRsp, error)
	Grouping(context.Context, *GroupingReq) (*GroupingRsp, error)
	SendData(IPCService_SendDataServer) error
}

func RegisterIPCServiceServer(s *grpc.Server, srv IPCServiceServer) {
	s.RegisterService(&_IPCService_serviceDesc, srv)
}

func _IPCService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.IPCService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCServiceServer).Ping(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCService_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCServiceServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.IPCService/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCServiceServer).IsReady(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCService_Grouping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCServiceServer).Grouping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.IPCService/Grouping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCServiceServer).Grouping(ctx, req.(*GroupingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPCService_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IPCServiceServer).SendData(&iPCServiceSendDataServer{stream})
}

type IPCService_SendDataServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*DataReqs, error)
	grpc.ServerStream
}

type iPCServiceSendDataServer struct {
	grpc.ServerStream
}

func (x *iPCServiceSendDataServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iPCServiceSendDataServer) Recv() (*DataReqs, error) {
	m := new(DataReqs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.IPCService",
	HandlerType: (*IPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _IPCService_Ping_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _IPCService_IsReady_Handler,
		},
		{
			MethodName: "Grouping",
			Handler:    _IPCService_Grouping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _IPCService_SendData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func (m *IsReadyRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReadyRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsReady {
		dAtA[i] = 0x8
		i++
		if m.IsReady {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GroupingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PeerIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.PeerIdx))
	}
	if m.RcvID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RcvID))
	}
	if m.RcvParallelism != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RcvParallelism))
	}
	if m.SndID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.SndID))
	}
	if m.StreamID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StreamID))
	}
	if m.GroupingType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintService(dAtA, i, uint64(m.GroupingType))
	}
	return i, nil
}

func (m *GroupingRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Parallelism != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Parallelism))
	}
	return i, nil
}

func (m *DataReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RcvID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RcvID))
	}
	if m.RcvIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.RcvIdx))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DataReqs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataReqs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Drs) > 0 {
		for _, msg := range m.Drs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Service(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IsReadyRsp) Size() (n int) {
	var l int
	_ = l
	if m.IsReady {
		n += 2
	}
	return n
}

func (m *GroupingReq) Size() (n int) {
	var l int
	_ = l
	if m.PeerIdx != 0 {
		n += 1 + sovService(uint64(m.PeerIdx))
	}
	if m.RcvID != 0 {
		n += 1 + sovService(uint64(m.RcvID))
	}
	if m.RcvParallelism != 0 {
		n += 1 + sovService(uint64(m.RcvParallelism))
	}
	if m.SndID != 0 {
		n += 1 + sovService(uint64(m.SndID))
	}
	if m.StreamID != 0 {
		n += 1 + sovService(uint64(m.StreamID))
	}
	if m.GroupingType != 0 {
		n += 1 + sovService(uint64(m.GroupingType))
	}
	return n
}

func (m *GroupingRsp) Size() (n int) {
	var l int
	_ = l
	if m.Parallelism != 0 {
		n += 1 + sovService(uint64(m.Parallelism))
	}
	return n
}

func (m *DataReq) Size() (n int) {
	var l int
	_ = l
	if m.RcvID != 0 {
		n += 1 + sovService(uint64(m.RcvID))
	}
	if m.RcvIdx != 0 {
		n += 1 + sovService(uint64(m.RcvIdx))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DataReqs) Size() (n int) {
	var l int
	_ = l
	if len(m.Drs) > 0 {
		for _, e := range m.Drs {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IsReadyRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReadyRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReadyRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReady", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReady = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIdx", wireType)
			}
			m.PeerIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvID", wireType)
			}
			m.RcvID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvParallelism", wireType)
			}
			m.RcvParallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvParallelism |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndID", wireType)
			}
			m.SndID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			m.StreamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingType", wireType)
			}
			m.GroupingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupingType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallelism", wireType)
			}
			m.Parallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parallelism |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvID", wireType)
			}
			m.RcvID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvIdx", wireType)
			}
			m.RcvIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataReqs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataReqs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataReqs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drs = append(m.Drs, &DataReq{})
			if err := m.Drs[len(m.Drs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xcd, 0xaa, 0xd3, 0x40,
	0x18, 0x75, 0xec, 0x4f, 0xc2, 0xd7, 0xab, 0x5c, 0x3f, 0x2f, 0x97, 0x21, 0x42, 0x28, 0x59, 0x5c,
	0xba, 0x4a, 0xe1, 0x0a, 0x75, 0xaf, 0x11, 0x09, 0x6e, 0xca, 0xd4, 0x17, 0x48, 0x93, 0x31, 0x04,
	0xd2, 0x64, 0x9c, 0x49, 0x83, 0x7d, 0x13, 0xdf, 0xc5, 0x17, 0x70, 0xe9, 0x23, 0x48, 0x5d, 0xfb,
	0x0e, 0x32, 0x33, 0x49, 0x88, 0xc5, 0xee, 0x72, 0x7e, 0xbe, 0x70, 0x4e, 0x4e, 0xe0, 0x99, 0xe2,
	0xb2, 0x2d, 0x52, 0x1e, 0x0a, 0x59, 0x37, 0x35, 0x3a, 0x1d, 0xf4, 0x5e, 0xe5, 0x75, 0x9d, 0x97,
	0x7c, 0x6d, 0xe8, 0xfd, 0xf1, 0xf3, 0x9a, 0x1f, 0x44, 0x73, 0xb2, 0xae, 0xe0, 0x01, 0x20, 0x56,
	0x8c, 0x27, 0xd9, 0x89, 0x29, 0x81, 0x14, 0x9c, 0xc2, 0x22, 0x4a, 0x96, 0x64, 0xe5, 0xb2, 0x1e,
	0x06, 0xdf, 0x09, 0x2c, 0x3e, 0xc8, 0xfa, 0x28, 0x8a, 0x2a, 0x67, 0xfc, 0x8b, 0x76, 0x0a, 0xce,
	0x65, 0x9c, 0x7d, 0x35, 0xce, 0x19, 0xeb, 0x21, 0xde, 0xc1, 0x4c, 0xa6, 0x6d, 0x1c, 0xd1, 0xa7,
	0x86, 0xb7, 0x00, 0x1f, 0xe0, 0xb9, 0x4c, 0xdb, 0x6d, 0x22, 0x93, 0xb2, 0xe4, 0x65, 0xa1, 0x0e,
	0x74, 0x62, 0xe4, 0x0b, 0x56, 0x5f, 0xab, 0x2a, 0x8b, 0x23, 0x3a, 0xb5, 0xd7, 0x06, 0xa0, 0x07,
	0xae, 0x6a, 0x24, 0x4f, 0x0e, 0x71, 0x44, 0x67, 0x46, 0x18, 0x30, 0x06, 0x70, 0x93, 0x77, 0xc1,
	0x3e, 0x9d, 0x04, 0xa7, 0x73, 0xa3, 0xff, 0xc3, 0x05, 0xeb, 0x51, 0x78, 0x25, 0x70, 0x09, 0x0b,
	0x31, 0x4a, 0x62, 0x0b, 0x8c, 0xa9, 0xe0, 0x23, 0x38, 0x51, 0xd2, 0x24, 0xba, 0xe9, 0xd0, 0x87,
	0x8c, 0xfb, 0xdc, 0xc3, 0x9c, 0xa5, 0xad, 0xae, 0x6f, 0x6b, 0x76, 0x08, 0x11, 0xa6, 0xfa, 0xd0,
	0xb4, 0xbb, 0x61, 0xe6, 0x39, 0x08, 0xc1, 0xed, 0x5e, 0xa6, 0x30, 0x80, 0x49, 0x26, 0x15, 0x25,
	0xcb, 0xc9, 0x6a, 0xf1, 0x78, 0x1b, 0xf6, 0x93, 0x75, 0x3a, 0xd3, 0xe2, 0xe3, 0x1f, 0x02, 0x10,
	0x6f, 0xdf, 0xed, 0xac, 0x86, 0x1b, 0x98, 0x6e, 0x8b, 0x2a, 0xc7, 0xfb, 0xd0, 0x0e, 0x19, 0xf6,
	0x43, 0x86, 0xef, 0xf5, 0x90, 0xde, 0x15, 0x1e, 0x37, 0xe0, 0x74, 0xd3, 0x5e, 0x3d, 0x7d, 0x39,
	0x04, 0x18, 0xfd, 0x04, 0x1b, 0x70, 0xfb, 0x8f, 0x85, 0x77, 0x83, 0x61, 0x34, 0xbe, 0xf7, 0x1f,
	0x56, 0x09, 0x7c, 0x03, 0xee, 0x8e, 0x57, 0x99, 0xae, 0x82, 0x2f, 0x2e, 0x9b, 0xa9, 0x6b, 0x31,
	0x57, 0xe4, 0xed, 0xed, 0x8f, 0xb3, 0x4f, 0x7e, 0x9e, 0x7d, 0xf2, 0xeb, 0xec, 0x93, 0x6f, 0xbf,
	0xfd, 0x27, 0xfb, 0xb9, 0xf1, 0xbc, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x47, 0x5c, 0xbe,
	0xd3, 0x02, 0x00, 0x00,
}
