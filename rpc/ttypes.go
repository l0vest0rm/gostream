// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Structs are the basic complex data structures. They are comprised of fields
// which each have an integer identifier, a type, a symbolic name, and an
// optional default value.
//
// Fields can be declared "optional", which ensures they will not be included
// in the serialized output if they aren't set.  Note that this requires some
// manual management in some languages.
//
// Attributes:
//  - PeerIdx
//  - RcvID
//  - RcvParallelism
//  - SndID
//  - StreamID
//  - GroupingType
type GroupingRequest struct {
	PeerIdx        int32 `thrift:"PeerIdx,1" json:"PeerIdx"`
	RcvID          int32 `thrift:"RcvID,2" json:"RcvID"`
	RcvParallelism int32 `thrift:"RcvParallelism,3" json:"RcvParallelism"`
	SndID          int32 `thrift:"SndID,4" json:"SndID"`
	StreamID       int32 `thrift:"StreamID,5" json:"StreamID"`
	GroupingType   int32 `thrift:"GroupingType,6" json:"GroupingType"`
}

func NewGroupingRequest() *GroupingRequest {
	return &GroupingRequest{}
}

func (p *GroupingRequest) GetPeerIdx() int32 {
	return p.PeerIdx
}

func (p *GroupingRequest) GetRcvID() int32 {
	return p.RcvID
}

func (p *GroupingRequest) GetRcvParallelism() int32 {
	return p.RcvParallelism
}

func (p *GroupingRequest) GetSndID() int32 {
	return p.SndID
}

func (p *GroupingRequest) GetStreamID() int32 {
	return p.StreamID
}

func (p *GroupingRequest) GetGroupingType() int32 {
	return p.GroupingType
}
func (p *GroupingRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupingRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PeerIdx = v
	}
	return nil
}

func (p *GroupingRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RcvID = v
	}
	return nil
}

func (p *GroupingRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RcvParallelism = v
	}
	return nil
}

func (p *GroupingRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SndID = v
	}
	return nil
}

func (p *GroupingRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StreamID = v
	}
	return nil
}

func (p *GroupingRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.GroupingType = v
	}
	return nil
}

func (p *GroupingRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupingRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupingRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PeerIdx", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:PeerIdx: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PeerIdx)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.PeerIdx (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:PeerIdx: ", p), err)
	}
	return err
}

func (p *GroupingRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RcvID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RcvID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RcvID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RcvID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RcvID: ", p), err)
	}
	return err
}

func (p *GroupingRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RcvParallelism", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:RcvParallelism: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RcvParallelism)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RcvParallelism (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:RcvParallelism: ", p), err)
	}
	return err
}

func (p *GroupingRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SndID", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SndID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SndID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SndID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SndID: ", p), err)
	}
	return err
}

func (p *GroupingRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("StreamID", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:StreamID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StreamID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.StreamID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:StreamID: ", p), err)
	}
	return err
}

func (p *GroupingRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GroupingType", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:GroupingType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GroupingType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GroupingType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:GroupingType: ", p), err)
	}
	return err
}

func (p *GroupingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupingRequest(%+v)", *p)
}

// Attributes:
//  - RcvID
//  - RcvIdx
//  - Data
type DataRequest struct {
	RcvID  int32  `thrift:"RcvID,1" json:"RcvID"`
	RcvIdx int32  `thrift:"RcvIdx,2" json:"RcvIdx"`
	Data   []byte `thrift:"Data,3" json:"Data"`
}

func NewDataRequest() *DataRequest {
	return &DataRequest{}
}

func (p *DataRequest) GetRcvID() int32 {
	return p.RcvID
}

func (p *DataRequest) GetRcvIdx() int32 {
	return p.RcvIdx
}

func (p *DataRequest) GetData() []byte {
	return p.Data
}
func (p *DataRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DataRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RcvID = v
	}
	return nil
}

func (p *DataRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RcvIdx = v
	}
	return nil
}

func (p *DataRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *DataRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DataRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RcvID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:RcvID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RcvID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RcvID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:RcvID: ", p), err)
	}
	return err
}

func (p *DataRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("RcvIdx", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:RcvIdx: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RcvIdx)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.RcvIdx (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:RcvIdx: ", p), err)
	}
	return err
}

func (p *DataRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Data", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data: ", p), err)
	}
	if err := oprot.WriteBinary(p.Data); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Data (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data: ", p), err)
	}
	return err
}

func (p *DataRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataRequest(%+v)", *p)
}

func (t *DataRequest) GetHashKey(srcPrallelism int, srcIndex int, dstPrallelism int) uint64 {
	return uint64(0)
}

func (t *DataRequest) Marshal() ([]byte, error) {
	return t.Data, nil
}
